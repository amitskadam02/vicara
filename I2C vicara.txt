The following descriptions of the I2C communication is written in the perspective of the master, in my case the STM32L053R8.

The writing sequence can be better described as:
Send Start sequence
Send Slave Address + read/write (Read = 1,Write=0)
Receive Slave Acknowledge (Should be a 0)
Send Sub address, which register you want to write to
Receive Slave Acknowledge (Should be a 0)
Send Data to be written to the register
Receive Slave Acknowledge (Should be a 0)
Send Stop Sequence


The reading sequence can be better described as: 
Send Start sequence
Send Slave Address + read/write (Read = 1,Write=0)
Receive Slave Acknowledge (Should be a 0)
Send Sub address, which register you want to write to
Receive Slave Acknowledge (Should be a 0)
Send Start sequence again
Send Slave Address + read/write (Read = 1,Write=0)
Receive Slave Acknowledge (Should be a 0)
Receive Data from SUB address
Send No Master Acknowledge
Send Stop Sequence



/*------------------------------------------------------------------------------------------------------
 * Name:    I2C.c
 * Purpose: Initializes and reads and writes to I2C
 *------------------------------------------------------------------------------------------------------
 * Note(s): The read and write sequence is specific to the ISK01A1, so these functions may not work
						for a different Devices I2C.
 *----------------------------------------------------------------------------------------------------*/

/*-------------------------------------------Include Statements---------------------------------------*/
#include "stm32l053xx.h"                  // Specific Device header
#include "I2C.h"
/*-------------------------------------------Global Variables-----------------------------------------*/
uint32_t I2C1_RX_Data = 0;
/*-------------------------------------------Functions------------------------------------------------*/


void enter_LPSleep( void )
{
	
	FLASH->ACR |= FLASH_ACR_SLEEP_PD;

	
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;

	
	Config_SysClk_MSI_131();

	
	SysTick_Init( 0.001 );
	I2C_Init();

	
	PWR->CR |= PWR_CR_LPSDSR; // voltage regulator in low-power mode during sleep

	
	SCB->SCR &= ~( SCB_SCR_SLEEPDEEP_Msk ); // low-power mode = sleep mode
	SCB->SCR |= SCB_SCR_SLEEPONEXIT_Msk; // reenter low-power mode after ISR

	__WFI(); // enter low-power mode
}

void I2C_Init(void){
	
	int SCL = 8;							//SCL pin on PORTB alt fnc 4
	int SDA = 9;							//SDA pin on PORTB alt fnc 4

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
	
	RCC->IOPENR |=  (1UL << 1);
	
	I2C1->CR1 |= (1<<8);						
	GPIOB->MODER = ~((~GPIOB->MODER) | ((1 << 2*SCL) + (1 << 2*SDA)));
	GPIOB->AFR[1] = 0x00000044;																				
	
	I2C1->TIMINGR = (uint32_t)0x00503D5A;	
	I2C1->CR1 |= I2C_CR1_PE;						
}



void Reset_I2C(void){
	int x = 0;		
	
	I2C1->CR1 ^= (-x ^ I2C1->CR1) & I2C_CR1_PE;	
	I2C1->CR1 |= I2C_CR1_PE;
}


uint32_t I2C_Read_Reg(uint32_t Device,uint32_t Register){
	
	//Reset CR2 Register
	I2C1->CR2 = 0x00000000;
	
	//Check to see if the bus is busy
	while((I2C1->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY);
	
	//Set CR2 for 1-byte transfer for Device
	I2C1->CR2 |=(1UL<<16) | (Device<<1);
	
	//Start communication
	I2C1->CR2 |= I2C_CR2_START;
	
	//Check Tx empty before writing to it
	if((I2C1->ISR & I2C_ISR_TXE) == (I2C_ISR_TXE)){
		I2C1->TXDR = Register;
	}
	
	//Wait for transfer to complete
	while((I2C1->ISR & I2C_ISR_TC) == 0);

	//Clear CR2 for new configuration
	I2C1->CR2 = 0x00000000;
	
	//Set CR2 for 1-byte transfer, in read mode for Device
	I2C1->CR2 |= (1UL<<16) | I2C_CR2_RD_WRN | (Device<<1);
	
	//Start communication
	I2C1->CR2 |= I2C_CR2_START;
	
	//Wait for transfer to complete
	while((I2C1->ISR & I2C_ISR_TC) == 0);
	
	//Send Stop Condition
	I2C1->CR2 |= I2C_CR2_STOP;
	
	//Check to see if the bus is busy
	while((I2C1->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY);

	//Clear Stop bit flag
	I2C1->ICR |= I2C_ICR_STOPCF;
	
	return(I2C1_RX_Data);
}


void I2C_Write_Reg(uint32_t Device,uint32_t Register, uint32_t Data){
	
	//Reset CR2 Register
	I2C1->CR2 = 0x00000000;
	
	//Check to see if the bus is busy
	while((I2C1->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY);
	
	//Set CR2 for 2-Byte Transfer, for Device
	I2C1->CR2 |= (2UL<<16) | (Device<<1);
	
	//Start communication
	I2C1->CR2 |= I2C_CR2_START;
	
	//Check Tx empty before writing to it
	if((I2C1->ISR & I2C_ISR_TXE) == (I2C_ISR_TXE)){
		I2C1->TXDR = Register;
	}
	
	//Wait for TX Register to clear
	while((I2C1->ISR & I2C_ISR_TXE) == 0);
	
	//Check Tx empty before writing to it
	if((I2C1->ISR & I2C_ISR_TXE) == I2C_ISR_TXE){
		I2C1->TXDR = Data;
	}
	
	//Wait for transfer to complete
	while((I2C1->ISR & I2C_ISR_TC) == 0);
	
	//Send Stop Condition
	I2C1->CR2 |= I2C_CR2_STOP;	
	
	//Check to see if the bus is busy
	while((I2C1->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY);
	
	//Clear Stop bit flag
	I2C1->ICR |= I2C_ICR_STOPCF;
}